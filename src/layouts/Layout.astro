---
import '@/styles/globals.css'
import { Button } from '@/components/ui/button';
import { Header } from '@/components/Header';

const currentPath = Astro.url.pathname;
const title = Astro.props.title || 'Event Check-in System';
const { API_TOKEN } = Astro.locals.runtime.env;
const apiTokenSet = API_TOKEN && API_TOKEN !== '';
---

<script is:inline>
  const getThemePreference = () => {
    if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
      return localStorage.getItem('theme');
    }
    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
  };
  const isDark = getThemePreference() === 'dark';
  document.documentElement.classList[isDark ? 'add' : 'remove']('dark');
 
  if (typeof localStorage !== 'undefined') {
    const observer = new MutationObserver(() => {
      const isDark = document.documentElement.classList.contains('dark');
      localStorage.setItem('theme', isDark ? 'dark' : 'light');
    });
    observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });
  }
</script>

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5, user-scalable=yes" />
    <link rel="icon" type="image/png" href="/favicon.png" />
    <meta name="generator" content={Astro.generator} />
    
    <!-- PWA Meta Tags -->
    <meta name="theme-color" content="#3b82f6" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="default" />
    <meta name="apple-mobile-web-app-title" content="Event Check-in" />
    <meta name="mobile-web-app-capable" content="yes" />
    <meta name="msapplication-TileColor" content="#3b82f6" />
    <meta name="msapplication-tap-highlight" content="no" />
    
    <!-- PWA Manifest -->
    <link rel="manifest" href="/manifest.json" />
    
    <!-- Apple Touch Icons -->
    <link rel="apple-touch-icon" href="/ducklytics-logo.png" />
    
    <!-- Cache Busting Script -->
    <script src="/cache-buster.js" defer></script>
    
    <!-- Security Headers -->
    <meta http-equiv="X-Content-Type-Options" content="nosniff" />
    <meta http-equiv="X-Frame-Options" content="DENY" />
    <meta http-equiv="X-XSS-Protection" content="1; mode=block" />
    <meta http-equiv="Referrer-Policy" content="strict-origin-when-cross-origin" />
    
    <!-- Cache Control -->
    <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate" />
    <meta http-equiv="Pragma" content="no-cache" />
    <meta http-equiv="Expires" content="0" />
    
    <!-- Version for cache busting -->
    <meta name="app-version" content="1.0.0" />
    <meta name="build-timestamp" content={new Date().toISOString()} />
    
    <title>{title ? `${title} - Event Check-in System` : 'Event Check-in System'}</title>
  </head>
  <body class="min-h-screen flex flex-col">
    <Header currentPath={currentPath} />
    <main class="flex-1 container mx-auto px-4 py-6 max-w-7xl">
      <div class="space-y-6">
        <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
          <h1 class="text-2xl sm:text-3xl lg:text-4xl font-bold tracking-tight text-gray-900 dark:text-white">
            {title}
          </h1>
          <div class="flex-shrink-0">
            <slot name="actions" />
          </div>
        </div>
        <slot />
      </div>
    </main>
  </body>
  
  <!-- Service Worker Registration -->
  <script>
    if ('serviceWorker' in navigator) {
      window.addEventListener('load', () => {
        navigator.serviceWorker.register('/sw.js')
          .then((registration) => {
            console.log('SW registered: ', registration);
            
            // Check for updates
            registration.addEventListener('updatefound', () => {
              const newWorker = registration.installing;
              if (newWorker) {
                newWorker.addEventListener('statechange', () => {
                  if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
                    // New content is available, show update notification
                    if (confirm('New version available! Reload to update?')) {
                      window.location.reload();
                    }
                  }
                });
              }
            });
          })
          .catch((registrationError) => {
            console.log('SW registration failed: ', registrationError);
          });
      });
    }
    
    // PWA install functionality removed
    
    // Refresh button functionality
    function setupRefreshButton() {
      const refreshButton = document.getElementById('refresh-app-button');
      if (refreshButton) {
        refreshButton.addEventListener('click', function(e) {
          e.preventDefault();
          console.log('Refresh button clicked!');
          
          // Show visual feedback
          const button = e.currentTarget;
          const originalHTML = button.innerHTML;
          button.innerHTML = '<svg class="w-6 h-6 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path></svg>';
          button.disabled = true;
          
          // Clear all caches and force refresh
          console.log('Clearing caches...');
          
          // Clear localStorage cache version
          localStorage.removeItem('app_cache_version');
          localStorage.setItem('force_refresh', 'true');
          
          // Clear service worker caches
          if ('caches' in window) {
            caches.keys().then(function(cacheNames) {
              console.log('Found caches:', cacheNames);
              return Promise.all(
                cacheNames.map(function(cacheName) {
                  console.log('Deleting cache:', cacheName);
                  return caches.delete(cacheName);
                })
              );
            }).then(function() {
              console.log('All caches cleared, reloading...');
              // Reload the page after clearing caches
              window.location.reload(true);
            }).catch(function(error) {
              console.error('Error clearing caches:', error);
              // Still reload even if cache clearing fails
              window.location.reload(true);
            });
          } else {
            console.log('No caches API, just reloading...');
            // Fallback: just reload
            window.location.reload(true);
          }
        });
        console.log('Refresh button event listener added');
      } else {
        console.log('Refresh button not found');
      }
    }
    
    // Setup refresh button when DOM is ready
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', setupRefreshButton);
    } else {
      setupRefreshButton();
    }
  </script>
</html>

