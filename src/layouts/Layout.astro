---
import '@/styles/globals.css'
import { Button } from '@/components/ui/button';
import { Header } from '@/components/Header';

const currentPath = Astro.url.pathname;
const title = Astro.props.title || 'Event Check-in System';
const { API_TOKEN } = Astro.locals.runtime.env;
const apiTokenSet = API_TOKEN && API_TOKEN !== '';
---

<script is:inline>
  const getThemePreference = () => {
    if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
      return localStorage.getItem('theme');
    }
    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
  };
  const isDark = getThemePreference() === 'dark';
  document.documentElement.classList[isDark ? 'add' : 'remove']('dark');
 
  if (typeof localStorage !== 'undefined') {
    const observer = new MutationObserver(() => {
      const isDark = document.documentElement.classList.contains('dark');
      localStorage.setItem('theme', isDark ? 'dark' : 'light');
    });
    observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });
  }
</script>

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5, user-scalable=yes" />
    <link rel="icon" type="image/png" href="/favicon.png" />
    <meta name="generator" content={Astro.generator} />
    
    <!-- PWA Meta Tags -->
    <meta name="theme-color" content="#3b82f6" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="default" />
    <meta name="apple-mobile-web-app-title" content="Event Check-in" />
    <meta name="mobile-web-app-capable" content="yes" />
    <meta name="msapplication-TileColor" content="#3b82f6" />
    <meta name="msapplication-tap-highlight" content="no" />
    
    <!-- PWA Manifest -->
    <link rel="manifest" href="/manifest.json" />
    
    <!-- Apple Touch Icons -->
    <link rel="apple-touch-icon" href="/ducklytics-logo.png" />
    
    <!-- Cache Busting Script -->
    <script src="/cache-buster.js" defer></script>
    
    <!-- Security Headers -->
    <meta http-equiv="X-Content-Type-Options" content="nosniff" />
    <meta http-equiv="X-Frame-Options" content="DENY" />
    <meta http-equiv="X-XSS-Protection" content="1; mode=block" />
    <meta http-equiv="Referrer-Policy" content="strict-origin-when-cross-origin" />
    
    <!-- Cache Control -->
    <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate" />
    <meta http-equiv="Pragma" content="no-cache" />
    <meta http-equiv="Expires" content="0" />
    
    <!-- Version for cache busting -->
    <meta name="app-version" content="1.0.0" />
    <meta name="build-timestamp" content={new Date().toISOString()} />
    
    <title>{title ? `${title} - Event Check-in System` : 'Event Check-in System'}</title>
  </head>
  <body class="min-h-screen flex flex-col">
    <Header currentPath={currentPath} />
    <main class="flex-1 container mx-auto px-4 py-6 max-w-7xl">
      <div class="space-y-6">
        <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
          <h1 class="text-2xl sm:text-3xl lg:text-4xl font-bold tracking-tight text-gray-900 dark:text-white">
            {title}
          </h1>
          <div class="flex-shrink-0">
            <slot name="actions" />
          </div>
        </div>
        <slot />
      </div>
    </main>
  </body>
  
  <!-- Service Worker Registration -->
  <script>
    if ('serviceWorker' in navigator) {
      window.addEventListener('load', () => {
        navigator.serviceWorker.register('/sw.js')
          .then((registration) => {
            console.log('SW registered: ', registration);
            
            // Check for updates
            registration.addEventListener('updatefound', () => {
              const newWorker = registration.installing;
              if (newWorker) {
                newWorker.addEventListener('statechange', () => {
                  if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
                    // New content is available, show update notification
                    if (confirm('New version available! Reload to update?')) {
                      window.location.reload();
                    }
                  }
                });
              }
            });
          })
          .catch((registrationError) => {
            console.log('SW registration failed: ', registrationError);
          });
      });
    }
    
    // PWA Install Prompt
    let deferredPrompt;
    let installButton = null;
    
    window.addEventListener('beforeinstallprompt', (e) => {
      console.log('PWA install prompt available');
      e.preventDefault();
      deferredPrompt = e;
      
      // Show install button
      showInstallButton();
    });
    
    function showInstallButton() {
      if (installButton) return; // Already showing
      
      installButton = document.createElement('button');
      installButton.innerHTML = 'ðŸ“± Install App';
      installButton.className = 'fixed bottom-4 right-4 bg-blue-600 text-white px-4 py-3 rounded-lg shadow-lg z-50 btn-responsive font-medium flex items-center space-x-2';
      installButton.onclick = handleInstallClick;
      
      // Add close button
      const closeButton = document.createElement('button');
      closeButton.innerHTML = 'Ã—';
      closeButton.className = 'absolute -top-2 -right-2 bg-gray-600 text-white w-6 h-6 rounded-full text-sm flex items-center justify-center';
      closeButton.onclick = (e) => {
        e.stopPropagation();
        hideInstallButton();
      };
      installButton.appendChild(closeButton);
      
      document.body.appendChild(installButton);
      
      // Auto-hide after 15 seconds
      setTimeout(() => {
        hideInstallButton();
      }, 15000);
    }
    
    function hideInstallButton() {
      if (installButton && installButton.parentNode) {
        installButton.remove();
        installButton = null;
      }
    }
    
    function handleInstallClick() {
      if (!deferredPrompt) return;
      
      // Show the install prompt
      deferredPrompt.prompt();
      
      // Wait for the user to respond to the prompt
      deferredPrompt.userChoice.then((choiceResult) => {
        console.log('User choice:', choiceResult.outcome);
        if (choiceResult.outcome === 'accepted') {
          console.log('User accepted the install prompt');
        } else {
          console.log('User dismissed the install prompt');
        }
        
        // Clear the deferredPrompt
        deferredPrompt = null;
        hideInstallButton();
      });
    }
    
    // Track PWA install
    window.addEventListener('appinstalled', (evt) => {
      console.log('PWA was installed');
      hideInstallButton();
    });
    
    // Add manual install option to header (for desktop users)
    function addManualInstallOption() {
      // Only add if not already installed and not mobile
      if (window.matchMedia('(max-width: 768px)').matches) return;
      
      const header = document.querySelector('header');
      if (!header) return;
      
      const installLink = document.createElement('a');
      installLink.href = '#';
      installLink.innerHTML = 'ðŸ“± Install App';
      installLink.className = 'text-blue-600 hover:text-blue-700 px-3 py-2 rounded-md text-sm font-medium';
      installLink.onclick = (e) => {
        e.preventDefault();
        if (deferredPrompt) {
          handleInstallClick();
        } else {
          // Show instructions for manual install
          alert('To install this app:\n\nChrome/Edge: Click the install icon in the address bar\nFirefox: Click the install icon in the address bar\nSafari: Tap Share > Add to Home Screen');
        }
      };
      
      // Add to header actions if available
      const headerActions = header.querySelector('.flex.items-center.space-x-2');
      if (headerActions) {
        headerActions.appendChild(installLink);
      }
    }
    
    // Add manual install option after page load
    setTimeout(addManualInstallOption, 1000);
  </script>
</html>

